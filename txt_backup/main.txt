# File processed on: 2025-05-07 18:30:35

# main.py
"""
雷达信号处理系统主程序
"""
import numpy as np
import matplotlib.pyplot as plt

# 从各模块导入函数
try:
    from moulds.signal_generator import generate_signal
    from moulds.filters import butter_bandpass_filter
    from moulds.spectrum_analyzer import compute_power_spectrum
    from moulds.peak_detector import detect_peaks
    from moulds.visualizer import plot_results
except ImportError as e:
    print(f"错误：无法导入一个或多个模块: {e}")
    print("请确保模块文件位于 'moulds' 文件夹下，并且 main.py 与 moulds 文件夹在同一父目录下，或者 'moulds' 的父目录在 PYTHONPATH 中。")
    exit()

# --- 中文显示配置 ---
try:
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    print("[Main] 尝试设置matplotlib中文字体为SimHei。")
except Exception as e:
    print(f"[Main] 设置中文字体失败: {e}。图形标签可能显示为英文或乱码。")
# --- 中文显示配置结束 ---

def main():
    # --- 实验参数定义 ---
    SIGNAL_DURATION = 10.0
    SYSTEM_FS = 100.0
    SIGNAL_NUM_POINTS = int(SYSTEM_FS * SIGNAL_DURATION)
    BASE_FREQ = 5.0
    NOISE_MEAN = 0.0
    NOISE_STD = 0.5
    LOWCUT_FREQ = 4.0
    HIGHCUT_FREQ = 6.0
    FILTER_ORDER = 5
    PEAK_THRESHOLD_RATIO = 0.5

    print("--- 雷达信号处理系统 ---")
    print(f"参数: 时长={SIGNAL_DURATION}s, 点数={SIGNAL_NUM_POINTS}, 采样率={SYSTEM_FS}Hz")
    print(f"信号: 基频={BASE_FREQ}Hz, 噪声均值={NOISE_MEAN}, 噪声标准差={NOISE_STD}")
    print(f"滤波器: 通带={LOWCUT_FREQ}-{HIGHCUT_FREQ}Hz, 阶数={FILTER_ORDER}")
    print(f"峰值检测阈值比例: {PEAK_THRESHOLD_RATIO*100:.0f}% of max power")

    # 1. 信号生成模块调用
    print("\n[1. 信号生成模块]")
    time_axis, original_signal, fs_generated = generate_signal(
        duration=SIGNAL_DURATION,
        num_points=SIGNAL_NUM_POINTS,
        base_freq=BASE_FREQ,
        noise_mean=NOISE_MEAN,
        noise_std=NOISE_STD
    )
    if not np.isclose(fs_generated, SYSTEM_FS):
        print(f"警告: 信号生成模块返回的采样率 {fs_generated:.2f} Hz 与系统预设采样率 {SYSTEM_FS:.2f} Hz 不符。")
    print(f"  原始信号已生成 (数据点数: {len(original_signal)})")

    # 2. 滤波器模块调用
    print("\n[2. 滤波器模块]")
    filtered_signal = butter_bandpass_filter(
        data=original_signal,
        lowcut=LOWCUT_FREQ,
        highcut=HIGHCUT_FREQ,
        fs=SYSTEM_FS,
        order=FILTER_ORDER
    )
    print(f"  信号已滤波 (数据点数: {len(filtered_signal)})")

    # 3. 频谱分析模块调用
    print("\n[3. 频谱分析模块]")
    frequencies, power_spectrum = compute_power_spectrum(
        signal=filtered_signal,
        fs=SYSTEM_FS
    )
    print(f"  频域数据已计算 (频率点数: {len(frequencies)})")

    # 4. 峰值检测模块调用
    print("\n[4. 峰值检测模块]")
    spectrum_data_for_peaks = (power_spectrum, frequencies)
    peak_indices, detected_frequencies_list, detected_peak_powers = detect_peaks(
        spectrum_data_for_peaks,
        threshold_ratio=PEAK_THRESHOLD_RATIO
    )
    
    peak_info_for_plot = "未检测到显著峰值" # Default string for plot
    if detected_frequencies_list:
        formatted_freqs = [f"{f:.2f}" for f in detected_frequencies_list]
        # 控制台输出格式
        print(f"  Detected peaks at frequencies: {formatted_freqs}") 
        # 用于绘图的字符串
        peak_info_for_plot = f"检测到的峰值频率: {', '.join(formatted_freqs)} Hz"
    else:
        print("  未检测到显著峰值。")


    # 5. 最终可视化模块调用 (综合显示)
    print("\n[5. 可视化模块]")
    print("  准备最终可视化结果...")
    
    filter_info_str = f"滤波器: {LOWCUT_FREQ}-{HIGHCUT_FREQ}Hz, {FILTER_ORDER}阶"
    # 将峰值信息添加到主标题或副标题
    main_plot_label = f"基频 {BASE_FREQ}Hz 信号处理 (噪声均值 {NOISE_MEAN}, 标准差 {NOISE_STD})"
    # 更新 signal_label 或 filter_info_str 以包含峰值信息
    # 例如，我们可以将峰值信息添加到 filter_info_str 的末尾
    full_filter_info_str = f"{filter_info_str}\n{peak_info_for_plot}"
    
    plot_results(
        time_axis=time_axis,
        original_signal=original_signal,
        filtered_signal=filtered_signal,
        frequencies=frequencies,
        power_spectrum=power_spectrum,
        peak_indices=peak_indices,
        base_freq_actual=BASE_FREQ,
        signal_label=main_plot_label, # 主标题部分
        filter_info_str=full_filter_info_str, # 副标题部分，包含滤波器和峰值信息
        fs_for_plot=SYSTEM_FS
    )

    print("\n--- 所有处理和图形创建完毕 ---")
    print("调用 plt.show() 来显示所有已创建的图形...")
    plt.show() 

    input("按 Enter 键结束程序并关闭所有图形...") 
    plt.close('all') 
    print("程序结束。")


if __name__ == "__main__":
    main()