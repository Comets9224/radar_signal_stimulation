# update_txt_backups.py
import os
import shutil # 用于复制文件

def backup_py_to_txt(source_dir=".", backup_subdir="txt_backup"):
    """
    将指定目录下的所有 .py 文件内容复制到备份子目录中，并以 .txt 后缀保存。
    """
    # 获取当前脚本所在的绝对路径
    current_script_path = os.path.abspath(source_dir)
    backup_dir_path = os.path.join(current_script_path, backup_subdir)

    # 创建备份子目录（如果不存在）
    if not os.path.exists(backup_dir_path):
        try:
            os.makedirs(backup_dir_path)
            print(f"创建备份目录: {backup_dir_path}")
        except OSError as e:
            print(f"错误: 无法创建备份目录 {backup_dir_path}: {e}")
            return

    print(f"正在从 '{current_script_path}' 备份 .py 文件到 '{backup_dir_path}'...")

    file_count = 0
    for filename in os.listdir(current_script_path):
        if filename.endswith(".py"):
            source_file_path = os.path.join(current_script_path, filename)
            # 构建目标文件名，将 .py 替换为 .txt
            base, ext = os.path.splitext(filename)
            destination_filename = base + ".txt"
            destination_file_path = os.path.join(backup_dir_path, destination_filename)

            try:
                # 我们是复制文件内容，不是重命名或移动
                # 最简单的方式是直接复制文件，然后重命名，但题目要求是“复制一份其中代码”
                # 更准确地说是复制文件并改后缀
                shutil.copy2(source_file_path, destination_file_path) # copy2会保留元数据
                print(f"  已复制: {filename} -> {backup_subdir}/{destination_filename}")
                file_count += 1
            except Exception as e:
                print(f"  错误: 无法复制 {filename}: {e}")

    if file_count > 0:
        print(f"\n成功备份 {file_count} 个 .py 文件。")
    else:
        print("\n未找到 .py 文件进行备份。")

if __name__ == "__main__":
    backup_py_to_txt()
    input("按 Enter 键退出...") # 防止窗口直接关闭