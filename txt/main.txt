# main.py
"""
雷达信号处理系统主程序
"""
import numpy as np

# 从各模块导入函数
from signal_generator import generate_signal
from filters import butter_bandpass_filter
from spectrum_analyzer import compute_power_spectrum
from peak_detector import detect_peaks
from visualizer import plot_results


def main():
    # --- 实验参数定义 ---
    # 信号生成参数
    # 实验要求 "时间轴：0-10秒，采样点1000个"
    # 实验要求 "采样频率：1000Hz" (滤波器模块)
    # 这两者是矛盾的。如果 fs=1000Hz 且 duration=10s, 则 num_points = 10000.
    # 如果 fs=1000Hz 且 num_points=1000, 则 duration = 1s.
    # 我们以滤波器模块的 fs=1000Hz 为准，并调整信号生成参数以匹配。
    # 选择 duration=1s, num_points=1000, 从而 fs=1000Hz.
    # 或者选择 duration=10s, num_points=10000, 从而 fs=1000Hz.
    # 为了与 "采样点1000个" 更接近，我们选择前者。
    # 如果非要0-10秒，1000点，那fs=100Hz，这与滤波器要求冲突。
    # 最终决定：使用 fs=1000Hz (来自滤波器要求)，duration=1s, num_points=1000 (来自信号生成要求)

    SYSTEM_FS = 1000.0  # Hz, 系统采样频率
    SIGNAL_DURATION = 1.0  # 秒, 信号时长 (调整以匹配FS和NUM_POINTS)
    SIGNAL_NUM_POINTS = 1000  # 采样点数
    # SIGNAL_DURATION = 10.0 # 秒, 信号时长 (如果坚持10秒)
    # SIGNAL_NUM_POINTS = int(SYSTEM_FS * SIGNAL_DURATION) # 采样点数 (10000)

    BASE_FREQ = 5.0  # Hz, 基频
    NOISE_STD = 0.5  # 噪声标准差

    # 滤波器参数
    LOWCUT_FREQ = 4.0  # Hz
    HIGHCUT_FREQ = 6.0  # Hz
    FILTER_ORDER = 5

    # 峰值检测参数
    PEAK_THRESHOLD_RATIO = 0.5  # 峰值点功率需大于最大功率的50%

    print("--- 雷达信号处理系统 ---")
    print(f"系统采样率: {SYSTEM_FS} Hz")
    print(f"信号时长: {SIGNAL_DURATION} s, 采样点数: {SIGNAL_NUM_POINTS}")

    # 1. 信号生成模块
    # 注意：generate_signal内部会根据duration和num_points计算自己的fs_actual
    # 我们需要确保这里传递的参数使得 fs_actual == SYSTEM_FS
    # time_axis, original_signal, fs_generated = generate_signal(
    #     duration=SIGNAL_DURATION,
    #     num_points=SIGNAL_NUM_POINTS,
    #     base_freq=BASE_FREQ,
    #     noise_std=NOISE_STD
    # )
    # if not np.isclose(fs_generated, SYSTEM_FS):
    #     print(f"警告: 生成信号的采样率 ({fs_generated:.2f} Hz) 与系统采样率 ({SYSTEM_FS} Hz) 不符。")
    #     print("请检查 signal_generator.py 或 main.py 中的参数设置。")
    #     # 可以选择退出或强制使用SYSTEM_FS重新生成时间轴

    # 重新设计信号生成调用，使其明确使用SYSTEM_FS
    time_axis = np.linspace(0, SIGNAL_DURATION, SIGNAL_NUM_POINTS, endpoint=False)
    clean_component = np.sin(2 * np.pi * BASE_FREQ * time_axis)
    noise_component = np.random.normal(0, NOISE_STD, SIGNAL_NUM_POINTS)
    original_signal = clean_component + noise_component
    print(f"[主程序] 信号已生成：基频={BASE_FREQ}Hz, 噪声标准差={NOISE_STD}")

    # 2. 滤波器模块
    filtered_signal = butter_bandpass_filter(
        data=original_signal,
        lowcut=LOWCUT_FREQ,
        highcut=HIGHCUT_FREQ,
        fs=SYSTEM_FS,
        order=FILTER_ORDER
    )
    print(f"[主程序] 信号已滤波：通带 {LOWCUT_FREQ}-{HIGHCUT_FREQ} Hz, 阶数 {FILTER_ORDER}")

    # 3. 频谱分析模块
    # 对滤波后的信号进行频谱分析，以清晰观察目标频率
    frequencies, power_spectrum = compute_power_spectrum(
        signal=filtered_signal,  # 使用滤波后的信号
        fs=SYSTEM_FS
    )
    print(f"[主程序] 已计算功率谱，频率点数: {len(frequencies)}")

    # 4. 峰值检测模块
    peak_indices, detected_frequencies = detect_peaks(
        power_spectrum=power_spectrum,
        frequencies=frequencies,
        threshold_ratio=PEAK_THRESHOLD_RATIO
    )
    print(f"[主程序] 峰值检测完成。")

    # 控制台输出检测到的频率
    if detected_frequencies:
        formatted_freqs = [f"{f:.2f}" for f in detected_frequencies]
        print(f"Detected peaks at frequencies: [{', '.join(formatted_freqs)}]")
    else:
        print("No peaks detected.")

    # 5. 可视化模块
    print("[主程序] 正在生成可视化结果...")
    plot_results(
        time_axis=time_axis,
        original_signal=original_signal,
        filtered_signal=filtered_signal,
        frequencies=frequencies,
        power_spectrum=power_spectrum,
        peak_indices=peak_indices,
        detected_peak_frequencies=detected_frequencies,
        base_freq_actual=BASE_FREQ
    )
    print("--- 处理完毕 ---")


if __name__ == "__main__":
    main()